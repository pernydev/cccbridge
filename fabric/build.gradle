plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id "io.github.p03w.machete" version "1.+"
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = "${archives_base_name}-mc${mc_version}-${modloader}"
version = "v${mod_version}"
group = project.maven_group

repositories {
	mavenLocal()
	mavenCentral()

	maven { url = 'https://maven.parchmentmc.org' }

	maven { url = "https://squiddev.cc/maven/" }
	maven { url = "https://maven.shedaniel.me/" }
	maven { url = "https://maven.blamejared.com" } // Location of the maven for vazkii's mods

	maven { url = "https://jitpack.io/" } // CC:R, Mixin Extras, fabric ASM

	maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Suggestion Tweaker
	maven { url = "https://mvn.devos.one/snapshots/" } // Create, Porting Lib, Forge Tags, Milk Lib
	maven { url = "https://cursemaven.com" } // Forge Config API Port
	maven { url = "https://maven.tterrag.com/" } // Registrate and Flywheel
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes

	maven { url = "https://maven.terraformersmc.com/releases/" } // Modmenu
}

dependencies {
	// dev environment
	minecraft "com.mojang:minecraft:${project.mc_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.mc_version}:${project.parchment_version}@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// dependencies we dont use nowerdays HAHAHAHAHAHA
	//modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

	// recipe viewers
	modRuntimeOnly("dev.architectury:architectury-fabric:${project.architectury_version}") // for REI
	modRuntimeOnly("me.shedaniel.cloth:basic-math:0.6.0") // for REI
	modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}") { transitive = false }
	modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") { transitive = false }
	modCompileOnly("dev.emi:emi:${project.emi_version}") { transitive = false }

	def recipeViewer = project.recipe_viewer
	if (recipeViewer == "emi") {
		modLocalRuntime("dev.emi:emi:${project.emi_version}")  { transitive = false }
	} else if (recipeViewer == "rei") {
		modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") { transitive = false }
	} else {
		println("unknown recipe viewer: $recipeViewer")
	}

	modLocalRuntime("maven.modrinth:lazydfu:0.1.2") // lazydfu - improves start times
	modLocalRuntime("maven.modrinth:suggestion-tweaker:${project.suggestion_tweaker_version}") // suggestion tweaker - dev QOL, improves command suggestions
	modLocalRuntime("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") { exclude(group: "net.fabricmc.fabric-api") } // required for suggestion tweaker and REI
	modLocalRuntime("com.terraformersmc:modmenu:${project.modmenu_version}") { exclude group: "net.fabricmc"; exclude group: "net.fabricmc.fabric-api" } // always good to have

	// used to prevent forge config api port from complaining
	modImplementation("com.github.AlphaMode:fakeconfig:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
	modImplementation("com.github.AlphaMode:fakeconfigtoml:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }

	// Create
	modImplementation("com.simibubi.create:create-fabric-${project.mc_version}:${project.create_version}+mc${project.mc_version}")
	modImplementation("io.github.fabricators_of_create:Porting-Lib:$project.port_lib_version+$project.mc_version")
	modImplementation("me.alphamode:ForgeTags:${project.forge_tags_version}")
	modImplementation("curse.maven:forge-config-api-port-fabric-547434:${project.config_api_id}") { transitive = false }
	modImplementation("com.tterrag.registrate:Registrate:${project.registrate_version}")
	modImplementation("com.jozufozu.flywheel:flywheel-fabric-${project.mc_version}:${project.flywheel_version}")
	modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_entity_attributes_version}")
	modImplementation("io.github.tropheusj:milk-lib:${project.milk_lib_version}")

	// CC:R setup
	modImplementation("com.github.cc-tweaked:cc-restitched:v${project.mc_version}-${project.cc_version}-ccr")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand(project.properties)
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
	options.compilerArgs <<"-Xlint:deprecation"
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
	manifest {
		attributes([
				"Specification-Title"     : "${project.archives_base_name}",
				"Specification-Vendor"    : "${project.maven_group}",
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : project.mod_version,
				"Implementation-Vendor"   : "${project.maven_group}",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {}
}
