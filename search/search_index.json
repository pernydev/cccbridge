{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>You found the wiki section. Great! And welcome. This mod allows you to write Lua scripts in CC: Tweaked that can interact with Create. And this place will show you how.</p>"},{"location":"#programming-for-beginners","title":"Programming for beginners","text":"<p>If you are new to CC: Tweaked or Lua programming in general, consider to take a look at the following ancient (but still usable) resources:</p> <ul> <li>SethBling - \"Programming Tutorial with Minecraft Turtles\" on YouTube,</li> <li>Direwolf20's ComputerCraft tutorials series on YouTube as well and</li> <li>Lyqyd's Computer Basics, for those who prefer to read</li> </ul> <p>We also have a great Discord Server!</p>"},{"location":"#resources","title":"Resources","text":"<p>  Peripherals   Guides  </p> <p>  Issue Tracker   GitHub  </p>"},{"location":"guides/","title":"Guides","text":"<p>Here are some guides that might be helpful.</p> Title Description Wrenches and You Learn more about what is possible with Wrenches. Using Animatronics: The Analog Way Want to integrate the Animatronic in your buildings without knowing how to use a Computer? Animating Animatronics using Blockbench Blockbench can make it much easier to have many different animations. Using the charset via Create displays Blockbench can make it much easier to have many different animations."},{"location":"guides/charset/","title":"Using the charset via Create displays","text":"<p>CC: Tweaked has a special charset. It's based of a combination of different standards actually. The problem however is, that Minecraft and Create doesn't use this charset. While other mods barely handle this problem and grant the Computer raw access to the displays, CC:C Bridge converts the characters to something displayable.</p>"},{"location":"guides/charset/#legacy-formatting-is-disabled","title":"Legacy Formatting is disabled","text":"<p>While this works for of the characters easily, some can't be converted, like the section symbol (<code>\u00a7</code>), as Notch's legacy text formatting system uses it. (Players in Minecraft actually can't type it in game as well at any time!)</p>"},{"location":"guides/charset/#the-ccccset-ccc-charset","title":"The CCCCset (CC:C Charset)","text":"<p>Because of this, some characters have been replaced. They convert from and to Create or CC either direction to ensure an easy way to process symbols on any side.</p> <p>This is how the charset looks like on monitors and displays outside of CC:</p> <pre><code> |0 1 2 3 4 5 6 7 8 9 A B C D E F\n-+--------------------------------  \n0|  \u263a \u263b \u2665 \u2666 \u2663 \u2660 \u25cf \u25cb     \u2642 \u2640   \u266a \u266c\n1|\u25b6 \u25c0 \u2195 \u203c \u00b6 \u2591 \u25ac \u21a8 \u2b06 \u2b07 \u27a1 \u2b05 \u221f \u29fa \u25b2 \u25bc\n2|  ! \" # $ % &amp; ' ( ) * + , - . /\n3|0 1 2 3 4 5 6 7 8 9 : ; &lt; = &gt; ?\n4|@ A B C D E F G H I J K L M N O\n5|P Q R S T U V W X Y Z [ \\ ] ^ _\n6|` a b c d e f g h i j k l m n o\n7|p q r s t u v w x y z { | } ~ \u2592\n8|\u2800 \u2801 \u2808 \u2809 \u2802 \u2803 \u280a \u280b \u2810 \u2811 \u2818 \u2819 \u2812 \u2813 \u281a \u281b\n9|\u2804 \u2805 \u280c \u280d \u2806 \u2807 \u280e \u280f \u2814 \u2815 \u281c \u281d \u2816 \u2817 \u281e \u281f\nA|\u2593 \u00a1 \u00a2 \u00a3 \u00a4 \u00a5 \u00a6 \u2588 \u00a8 \u00a9 \u00aa \u00ab \u00ac \u00ad \u00ae \u00af\nB|\u00b0 \u00b1 \u00b2 \u00b3 \u00b4 \u00b5 \u00b6 \u00b7 \u00b8 \u00b9 \u00ba \u00bb \u00bc \u00bd \u00be \u00bf\nC|\u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u00c5 \u00c6 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00cc \u00cd \u00ce \u00cf\nD|\u00d0 \u00d1 \u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u00d7 \u00d8 \u00d9 \u00da \u00db \u00dc \u00dd \u00de \u00df\nE|\u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u00e5 \u00e6 \u00e7 \u00e8 \u00e9 \u00ea \u00eb \u00ec \u00ed \u00ee \u00ef\nF|\u00f0 \u00f1 \u00f2 \u00f3 \u00f4 \u00f5 \u00f6 \u00f7 \u00f8 \u00f9 \u00fa \u00fb \u00fc \u00fd \u00fe \u00ff\n</code></pre> <p>The charsets are equal to each other by about ~98%. The 'blit' characters (from \\128 to \\159) have been untouched, although they don't really work on Flip Displays and Nixie Tubes. They do work on Vanilla displays like Signs and Lecterns however.</p>"},{"location":"guides/charset/#differences","title":"Differences","text":"<p>Those are the main differences that have been made to the chars:</p> <ul> <li>\\016 (<code>\u00a7</code>) in CC changes to \\u2591 (<code>\u2591</code>) in Create</li> <li>\\160 (<code></code>) in CC changes to \\u2591 (<code>\u2593</code>) in Create</li> <li>\\167 (<code>\u00a7</code>) in CC changes to \\u2591 (<code>\u2588</code>) in Create</li> </ul> <p>As the pattern here gives it away, this mainly affects the symbols used for legacy formatting and the dithered blocks used by Create. This makes it possible to make the same progressbars as Create uses them.</p>"},{"location":"guides/charset/#example","title":"Example","text":"<p>The line <code>Power: \u2588\u2588\u2588\u2593\u2591\u2591\u2591</code> in Create would convert to <code>Power: \u00a7\u00a7\u00a7\u00a0\u00a7\u00a7\u00a7</code> in CC. Keep in mind, that the second row of <code>\u00a7</code> is \\016 and not \\167 like the first row. Same goes the other way around as well.</p>"},{"location":"guides/positioningAnimatronicAnalog/","title":"Using Animatronics: The Analog Way","text":"<p>Animatronics are normally controlled by a Computer. However, some people might not want to use another Computer, just to position it once. Others might not know how to use CC: Tweaked at all and can't use it because of this.</p> <p>But the Animatronic can actually be used without a Computer.</p>"},{"location":"guides/positioningAnimatronicAnalog/#viewing-rotation","title":"Viewing Rotation","text":"<p>To take a look at the current pose of an Animatronic, simply run the following command in Minecraft: <pre><code>data get block &lt;x&gt; &lt;y&gt; &lt;z&gt;\n</code></pre> The coordinates here represent where the Animatronic is standing.</p>"},{"location":"guides/positioningAnimatronicAnalog/#changing-rotation","title":"Changing Rotation","text":"<p>To change the rotation of a body part, you can run a similar command in Minecraft: <pre><code>data modify block &lt;x&gt; &lt;y&gt; &lt;z&gt; &lt;body_part&gt; set value [&lt;rot_x&gt;, &lt;rot_y&gt;, &lt;rot_z&gt;]\n</code></pre></p> <ul> <li>Again, the coordinates here represent where the Animatronic is standing.</li> <li><code>&lt;body_part&gt;</code> is either <code>\"leftArmPose\"</code>, <code>\"rightArmPose\"</code>, <code>\"bodyPose\"</code> or <code>\"headPose\"</code>.</li> <li><code>[&lt;rot_x&gt;, &lt;rot_y&gt;, &lt;rot_z&gt;]</code> is the new rotation of that body part.</li> </ul> <p>After entering this command, you can see how the Animatronic applies that position.</p>"},{"location":"guides/positioningAnimatronicsBlockbench/","title":"Animating Animatronics using Blockbench","text":"<p>The Animatronics purpose is to be positioned and animated. However, this can be difficult without additional help. But there are ways to make this process a lot easier!</p> <p>This guide will provide the needed resources to get started animating the Animatronic using Blockbench</p>"},{"location":"guides/positioningAnimatronicsBlockbench/#using-blockbench","title":"Using Blockbench","text":"<p>The easiest way to plan out positions and animations is by using the <code>Animatronic.bbmodel</code> file.</p> <p>So first of, get the model here! And if Blockbench still is not installed, then now is the perfect moment for a visit to their download page!</p>"},{"location":"guides/positioningAnimatronicsBlockbench/#basics","title":"Basics","text":"<p>Now that everything is downloaded - and hopefully installed as well: ... </p> <ol> <li>Open it up and head over to the <code>Animate</code> section.</li> <li>Notice the template animation on the left. You may just use it for now, or delete and create a new one for a better structure, if you want to export the animation later.</li> <li>If you want reposition a body part, either click on it in the preview or on the labeled bone.<ul> <li>Select the rotation tool by clicking on it on the toolbar, or by pressing <code>[R]</code>.</li> </ul> </li> <li>Animatronics only can apply one pose at the time. Consider this while animating them! In the timeline, select the frame indicating in which order a position is being pushed. It is recommended to limit the usage to decimal numbers for simplicity later, e.g. 1, 2, 3, ...</li> </ol> <p>Note</p> <p>For more complex animations, the Lua side part has to be manually implemented as well as there currently is no official provided module! This will be explained in the corresponding section.</p>"},{"location":"guides/positioningAnimatronicsBlockbench/#applying-rotations","title":"Applying rotations","text":"<p>After repositioning the Animatronic however needed, the body part rotations now can be applied in two ways. The lazy way is to copy and paste the the rotation values and push them manually.</p> <p>The values can be viewed on the lower left corner after selecting the corresponding body part. </p>"},{"location":"guides/positioningAnimatronicsBlockbench/#export-animations","title":"Export Animations","text":"<p>In case for more complex tasks, Blockbench can export animations as <code>json</code> files. This can be very handy for integration in Lua code.</p> <p>To export the <code>json</code> file, frist go to <code>Animation &gt; Export Animations</code> in the tab section. </p> <p>A popup then will open up. Select which animations you want to include in the file (in case multible ones were made). </p> <p>Finally, click on confirm and select where the <code>json</code> file should be saved. For further instructions on how to integrate this in Lua code, head over to the corresponding section.</p>"},{"location":"guides/positioningAnimatronicsBlockbench/#lua-animation-parser","title":"Lua Animation Parser","text":"<p>Reading the animations from the generated json file is the hardest part of this guide. This section will try it's best to make this process as easy as possible however.</p> <p>After the file has been uploaded to the Computer, we need to load and parse it before doing anything else with it.</p> Loading a <code>json</code> file in CC:Tweaked <p>This code can be used to load a <code>json</code> file. There are more efficient ways to do so, but this one should be solid.</p> parse.lua<pre><code>local path = \"path/to/your/exported/animations\"\nlocal file, err1 = fs.open(path, 'r')\n\nlocal parsed = {} -- Location for the later parsed animations\n\nif not file then\n    -- Error while loading file\n    local reason = (\"Could not load given file '%s'. Reason: '%s'\"):format(path, err1)\n    error(reason)\nend\n\n-- Reading animations file\nlocal raw = file.readAll()\nfile.close()\n\n-- Parsing\nlocal result, err2 = textutils.unserialiseJSON(raw)\n\nif not result then\n    -- Error while parsing\n    local reason = (\"Could not parse file '%s'. Reason: '%s'\"):format(path, err2)\n    error(reason)\nend\n\n-- Success\nparsed = result\n</code></pre>"},{"location":"guides/positioningAnimatronicsBlockbench/#explanation-of-json-animation-files","title":"Explanation of json animation files","text":"<p>With this aside, let's focus on the structure of the converted json data. To do so, the following json file will be used as an example: animation.animatronic.head-right-to-left.json<pre><code>{\n    \"format_version\": \"1.8.0\",\n    \"animations\": {\n        \"animation.template\": {\n            \"animation_length\": 1,\n            \"bones\": {\n                \"head\": {\n                    \"rotation\": {\n                        \"0.0\":      [0, 45, 0],\n                        \"0.0417\":   [0, 0, 0],\n                        \"1.0\":      [0, -45, 0]\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre></p> <p>The structure is pretty self-explanatory. Let's go over some relevant parts anyways:</p> <ul> <li><code>\"animations\"</code>: object; Contains the animation objects (e.g. <code>\"animation.template\"</code>).<ul> <li><code>\"animation_length\"</code>: number; Determines how many frames the animation will run.</li> <li><code>\"bones\"</code>: object; Contains the bones objects that indicate how they change within every configured frame. It may contain an entry for the Animatronics bones: <code>body</code>, <code>head</code>, <code>rightarm</code> &amp; <code>leftarm</code>.<ul> <li><code>\"rotation\"</code>: object: Instructions for how the bone will change within frame <code>X</code>.</li> </ul> </li> </ul> </li> </ul>"},{"location":"guides/positioningAnimatronicsBlockbench/#baking-the-animations","title":"'Baking' the animations","text":"<p>The format is pretty simple to integrate and use. There is only one problem however. The object <code>\"rotation\"</code> of each bone object saves the values using a string of the frame number as a key.</p> <p>This may not be very practical for further code. Especially if keys like <code>\"0.0417\"</code> were used. In order to simplify the the process in further code, we need to bake the code, i.e., perform a conversion of sorts.</p> <p>The following code can be used for this:</p> <pre><code>-- Assuming 'content' contains the parsed animation data\nlocal parsed = { ... } -- Replace with actual parsed data\n\n-- Create a table to hold the baked animations\nlocal animations = {}\n\n-- Loop through each animation entry in parsed data\nfor name, data in pairs(parsed.animations) do\n    local baked = {} -- Create a table to hold the baked animation data for this entry\n\n    -- Loop through each bone in the animation data\n    for part, rots in pairs(data.bones) do\n        baked[part] = {} -- Create a table to hold the baked bone rotation data\n\n        -- Check if the rotation data is a single set of rotations or a series\n        if type(rots.rotation[1]) == \"number\" then\n            baked[part][1] = rots.rotation -- If single, add it as-is\n        else\n            local indexes = {}\n\n            -- Collect and sort the frame indexes\n            for index, rot in pairs(rots.rotation) do\n                table.insert(indexes, index)\n            end\n            table.sort(indexes, function(a, b) return tonumber(a) &lt; tonumber(b) end)\n\n            -- Reorganize the rotation data using the sorted indexes\n            for new_index, real_index in ipairs(indexes) do\n                baked[part][new_index] = rots.rotation[real_index]\n            end\n        end\n    end\n\n    -- Add the baked animation data to the animations table\n    animations[name] = baked\nend\n\n-- At this point, the 'animations' table contains the transformed animation data\n</code></pre> <p>Consider taking a look at the marked lines for a deeper understanding of the problem solving  here!</p> <p>As a result, this is how the data would look like now:</p> baked (final Lua table)unbaked (only parsed) <pre><code>local animations = {\n    [\"animation.template\"] = {\n      head = {\n        [1] = { 0, 45, 0 },\n        [2] = { 0, 0, 0 },\n        [3] = { 0, -45, 0 }\n      }\n    }\n}\n</code></pre> <pre><code>local parsed = {\n    format_version = \"1.8.0\",\n    animations = {\n      [\"animation.template\"] = {\n        bones = {\n          head = {\n            rotation = {\n              [\"0.0417\"] = { 0, 0, 0 },\n              [\"0.0\"] = { 0, 45, 0 },\n              [\"1.0\"] = { 0, -45, 0 }\n            },\n          },\n        },\n        animation_length = 1\n      }\n    }\n}\n</code></pre> <p>Our new baked version now is much simpler to handle and contains about the same amount of needed informations as before! It also is easily adjustable.</p>"},{"location":"guides/wrenches/","title":"Wrenches and You","text":"<p>Some blocks have the ability to be manipulated via the Wrench from Create. This mod also implements this feature for the RedRouter Block and Animatronics.</p>"},{"location":"guides/wrenches/#right-click","title":"Right Click","text":"<p>By right clicking on the blocks upwards or downwards facing side, you can rotate them horizontally. The RedRouter Block can be rotated in 90\u00b0 steps, while the Animatronic can be rotated in 45\u00b0 steps.</p> <p>Note</p> <p>The Animatronic's rotation can be set to any number from 0\u00b0 to 360\u00b0 by manipulating the block state using the Debug Stick or the <code>/setblock</code> command.</p>"},{"location":"guides/wrenches/#shift-right-click","title":"Shift + Right Click","text":"<p>By pressing shift and right clicking, both the RedRouter Block and the Animatronic can be  removed and placed in your inventory instantly.</p>"},{"location":"peripherals/","title":"Peripherals","text":"<p>This section contains the API documentation.</p> Type Description Source Block Transmits text to any kind of display that works with Create. RedRouter Block Sends and receives redstone signals. Target Block Simulates a Create Display Target to receive data from Create Display Sources. Scroller Pane Provides an interface to select a number form a given spectrum. Animatronic Controls an Animatronic's body and face expression (Similar to Armor Stands)"},{"location":"peripherals/AnimatronicPeripheral/","title":"Animatronic","text":"<p> This peripheral is provided by the Animatronic. It is an electronic puppet that can be positioned however needed.</p> <p>The transition from one pose to a new one is fully automatic - and rusty.</p>"},{"location":"peripherals/AnimatronicPeripheral/#metadata","title":"Metadata","text":"Peripheral v1 Attach name <code>\"animatronic\"</code> Attach side only <code>\"top\"</code>"},{"location":"peripherals/AnimatronicPeripheral/#functions","title":"Functions","text":""},{"location":"peripherals/AnimatronicPeripheral/#setfaceface","title":"<code>setFace(face)</code>","text":"<p>Changes the face of the Animatronic.</p> <p>Parameters</p> <ol> <li><code>face</code>: string The new face. Must be either <code>\"normal\"</code>, <code>\"happy\"</code>, <code>\"question\"</code> or <code>\"sad\"</code>.</li> </ol> <p>Throws</p> <ol> <li>Whenever the given string is not one of those types.</li> </ol>"},{"location":"peripherals/AnimatronicPeripheral/#push","title":"<code>push()</code>","text":"<p>Pushes the stored rotation values to the Animatronic. After pushing them, every rotation gets reset to <code>0</code>.</p>"},{"location":"peripherals/AnimatronicPeripheral/#setheadrotx-y-z","title":"<code>setHeadRot(x, y, z)</code>","text":"<p>Sets the head rotation. Can only be set within the bounds -180\u00b0 to 180\u00b0 for <code>x</code>, <code>y</code> and <code>z</code>.</p> <p>Parameters</p> <ol> <li><code>x</code>: number The <code>x</code> rotation.</li> <li><code>y</code>: number The <code>y</code> rotation.</li> <li><code>z</code>: number The <code>z</code> rotation.</li> </ol>"},{"location":"peripherals/AnimatronicPeripheral/#setbodyrotx-y-z","title":"<code>setBodyRot(x, y, z)</code>","text":"<p>Sets the body rotation. Can only be set within the bounds -180\u00b0 to 180\u00b0 for <code>y</code> and <code>z</code>.</p> <p>Info</p> <p><code>x</code> can be set to any number within 360\u00b0.</p> <p>Parameters</p> <ol> <li><code>x</code>: number The <code>x</code> rotation.</li> <li><code>y</code>: number The <code>y</code> rotation.</li> <li><code>z</code>: number The <code>z</code> rotation.</li> </ol>"},{"location":"peripherals/AnimatronicPeripheral/#setleftarmrotx-y-z","title":"<code>setLeftArmRot(x, y, z)</code>","text":"<p>Sets the left arm rotation. Can only be set within the bounds -180\u00b0 to 180\u00b0 for <code>x</code>, <code>y</code> and <code>z</code>.</p> <p>Parameters</p> <ol> <li><code>x</code>: number The <code>x</code> rotation.</li> <li><code>y</code>: number The <code>y</code> rotation.</li> <li><code>z</code>: number The <code>z</code> rotation.</li> </ol>"},{"location":"peripherals/AnimatronicPeripheral/#setrightarmrotx-y-z","title":"<code>setRightArmRot(x, y, z)</code>","text":"<p>Sets the right arm rotation. Can only be set within the bounds -180\u00b0 to 180\u00b0 for <code>x</code>, <code>y</code> and <code>z</code>.</p> <p>Parameters</p> <ol> <li><code>x</code>: number The <code>x</code> rotation.</li> <li><code>y</code>: number The <code>y</code> rotation.</li> <li><code>z</code>: number The <code>z</code> rotation.</li> </ol>"},{"location":"peripherals/AnimatronicPeripheral/#getstoredheadrot","title":"<code>getStoredHeadRot()</code>","text":"<p>Returns the current stored head rotation.</p> <p>Returns  1. <code>number</code> The <code>x</code> rotation  2. <code>number</code> The <code>y</code> rotation  3. <code>number</code> The <code>z</code> rotation</p>"},{"location":"peripherals/AnimatronicPeripheral/#getstoredbodyrot","title":"<code>getStoredBodyRot()</code>","text":"<p>Returns the current stored body rotation.</p> <p>Returns  1. <code>number</code> The <code>x</code> rotation  2. <code>number</code> The <code>y</code> rotation  3. <code>number</code> The <code>z</code> rotation</p>"},{"location":"peripherals/AnimatronicPeripheral/#getstoredleftarmrot","title":"<code>getStoredLeftArmRot()</code>","text":"<p>Returns the current stored left arm rotation.</p> <p>Returns  1. <code>number</code> The <code>x</code> rotation  2. <code>number</code> The <code>y</code> rotation  3. <code>number</code> The <code>z</code> rotation</p>"},{"location":"peripherals/AnimatronicPeripheral/#getstoredrightarmrot","title":"<code>getStoredRightArmRot()</code>","text":"<p>Returns the current stored right arm rotation.</p> <p>Returns  1. <code>number</code> The <code>x</code> rotation  2. <code>number</code> The <code>y</code> rotation  3. <code>number</code> The <code>z</code> rotation</p>"},{"location":"peripherals/AnimatronicPeripheral/#getappliedheadrot","title":"<code>getAppliedHeadRot()</code>","text":"<p>Returns the rotation of the head.</p> <p>Returns  1. <code>number</code> The <code>x</code> rotation  2. <code>number</code> The <code>y</code> rotation  3. <code>number</code> The <code>z</code> rotation</p>"},{"location":"peripherals/AnimatronicPeripheral/#getappliedbodyrot","title":"<code>getAppliedBodyRot()</code>","text":"<p>Returns the rotation of the body.</p> <p>Returns  1. <code>number</code> The <code>x</code> rotation  2. <code>number</code> The <code>y</code> rotation  3. <code>number</code> The <code>z</code> rotation</p>"},{"location":"peripherals/AnimatronicPeripheral/#getappliedleftarmrot","title":"<code>getAppliedLeftArmRot()</code>","text":"<p>Returns the rotation of the left arm.</p> <p>Returns  1. <code>number</code> The <code>x</code> rotation  2. <code>number</code> The <code>y</code> rotation  3. <code>number</code> The <code>z</code> rotation</p>"},{"location":"peripherals/AnimatronicPeripheral/#getappliedrightarmrot","title":"<code>getAppliedRightArmRot()</code>","text":"<p>Returns the rotation of the right arm.</p> <p>Returns  1. <code>number</code> The <code>x</code> rotation  2. <code>number</code> The <code>y</code> rotation  3. <code>number</code> The <code>z</code> rotation</p>"},{"location":"peripherals/RedRouterBlockPeripheral/","title":"RedRouter Block","text":"<p> This peripheral is provided by the RedRouter Block. It is used to control redstone signals.</p> <p>The peripheral acts similar to the Redstone API with some exceptions like missing bundled cable support. The sides are configured similarly to the turtle, where <code>\"left\"</code> is relative to the blocks facing.</p>"},{"location":"peripherals/RedRouterBlockPeripheral/#metadata","title":"Metadata","text":"Peripheral v1 Attach name <code>\"redrouter\"</code> Attach side all"},{"location":"peripherals/RedRouterBlockPeripheral/#events","title":"Events","text":"<p>The RedRouter can send the following event:</p> Name Description Parameter 1 <code>\"redstone\"</code> Whenever a redstone signal has changed. <code>string</code>: attached_name"},{"location":"peripherals/RedRouterBlockPeripheral/#functions","title":"Functions","text":""},{"location":"peripherals/RedRouterBlockPeripheral/#setoutputside-on","title":"<code>setOutput(side, on)</code>","text":"<p>Set a redstone signal for a specific side.  </p> <p>Parameters</p> <ol> <li><code>side</code> : string The side to set.  </li> <li><code>on</code>: boolean The signals state <code>true</code> (power 15) or <code>false</code> (power 0) </li> </ol>"},{"location":"peripherals/RedRouterBlockPeripheral/#setanalogoutputside-value","title":"<code>setAnalogOutput(side, value)</code>","text":"<p>Set a redstone signal strength for a specific side.  </p> <p>Parameters</p> <ol> <li><code>side</code> : string The side to set.  </li> <li><code>value</code> : number The signal strength between 0 and 15.</li> </ol> <p>Throws</p> <ul> <li>Whenever <code>value</code> is not between 0 and 15.</li> </ul>"},{"location":"peripherals/RedRouterBlockPeripheral/#getoutputside","title":"<code>getOutput(side)</code>","text":"<p>Get the current redstone output of a specific side. (see <code>setOutput</code>) </p> <p>Parameters</p> <ol> <li><code>side</code>: string The side to get.  </li> </ol> <p>Returns</p> <ol> <li><code>boolean</code> Whether the redstone output is on or off.  </li> </ol>"},{"location":"peripherals/RedRouterBlockPeripheral/#getinputside","title":"<code>getInput(side)</code>","text":"<p>Get the current redstone input of a specific side.  </p> <p>Parameters</p> <ol> <li><code>side</code>: string The side to get.  </li> </ol> <p>Returns</p> <ol> <li><code>boolean</code> Whether the redstone input is on or off.  </li> </ol>"},{"location":"peripherals/RedRouterBlockPeripheral/#getanalogoutputside","title":"<code>getAnalogOutput(side)</code>","text":"<p>Get the redstone output signal strength for a specific side.  (see <code>setAnalogOutput</code>) </p> <p>Parameters</p> <ol> <li><code>side</code>: string The side to get.  </li> </ol> <p>Returns</p> <ol> <li>number The output signal strength, between 0 and 15.  </li> </ol>"},{"location":"peripherals/RedRouterBlockPeripheral/#getanaloginputside","title":"<code>getAnalogInput(side)</code>","text":"<p>Get the redstone input signal strength for a specific side.  </p> <p>Parameters</p> <ol> <li><code>side</code>: string The side to get.  </li> </ol> <p>Returns</p> <ol> <li>number The input signal strength, between 0 and 15.  </li> </ol>"},{"location":"peripherals/ScrollerBlockPeripheral/","title":"Scroller Pane","text":"<p> This peripheral is provided by the Scroller Pane. It allows players to provide an input as an number inside the world. The interface can be manipulated.</p> <p>The peripheral uses Create's <code>NumberBehaviour</code> selection screen. (The same one you see when you for example adjust the speed on an RotationalSpeedController)</p>"},{"location":"peripherals/ScrollerBlockPeripheral/#metadata","title":"Metadata","text":"Peripheral v2 Attach name <code>\"scroller\"</code> Attach side only <code>\"back\"</code>"},{"location":"peripherals/ScrollerBlockPeripheral/#events","title":"Events","text":"<p>The RedRouter can send the following event:</p> Name Description Parameter 1 Parameter 2 <code>\"scroller_changed\"</code> Whenever the value got changed by a player. <code>string</code>: attached_name <code>number</code>: new_value <p>Warning</p> <p>The event <code>\"scroller_changed\"</code> also fires when the value gets changed by an Computer. This is a bug that will be fixed!</p>"},{"location":"peripherals/ScrollerBlockPeripheral/#functions","title":"Functions","text":""},{"location":"peripherals/ScrollerBlockPeripheral/#islocked","title":"<code>isLocked()</code>","text":"<p>Returns whether the Scroller Pane is locked or not.</p> <p>Returns</p> <ol> <li><code>boolean</code> The state</li> </ol>"},{"location":"peripherals/ScrollerBlockPeripheral/#setlockstate","title":"<code>setLock(state)</code>","text":"<p>Unlocks the Scroller Pane with <code>state = false</code> (default) or locks it with <code>state = true</code> so that players cannot continue to use it.</p> <p>Parameters</p> <ol> <li><code>state</code>: boolean Wether the lock should be active or disabled.</li> </ol>"},{"location":"peripherals/ScrollerBlockPeripheral/#getvalue","title":"<code>getValue()</code>","text":"<p>Returns the selected value of the Scroller Pane.</p> <p>Returns</p> <ol> <li><code>number</code> The selected value.</li> </ol>"},{"location":"peripherals/ScrollerBlockPeripheral/#setvaluevalue","title":"<code>setValue(value)</code>","text":"<p>Changes the selected value.</p> <p>Parameters</p> <ol> <li><code>value</code>: number The new selected value.</li> </ol>"},{"location":"peripherals/ScrollerBlockPeripheral/#getlimit","title":"<code>getLimit()</code>","text":"<p>Returns the limit relative to zero.</p> <p>Returns</p> <ol> <li><code>number</code> The limit.</li> </ol>"},{"location":"peripherals/ScrollerBlockPeripheral/#hasminusspectrum","title":"<code>hasMinusSpectrum()</code>","text":"<p>Returns wether the Scroller Pane has the minus spectrum enabled.</p> <p>Returns</p> <ol> <li><code>boolean</code> Returns <code>true</code> if the minus spectrum is enabled as well.</li> </ol>"},{"location":"peripherals/ScrollerBlockPeripheral/#toggleminusspectrumstate","title":"<code>toggleMinusSpectrum(state)</code>","text":"<p>Enables or disables the minus spectrum.</p> <p>Parameters</p> <ol> <li><code>state</code>: boolean <code>true</code> for enabled minus spectrum, <code>false</code> for the opposite.</li> </ol>"},{"location":"peripherals/ScrollerBlockPeripheral/#setlimitlimit","title":"<code>setLimit(limit)</code>","text":"<p>Sets a new limit relative to zero. If the minus spectrum is enabled, the given limit then get's mirrored to the minus spectrum as well.</p> <p>Parameters</p> <ol> <li><code>limit</code>: number The new limit.</li> </ol>"},{"location":"peripherals/SourceBlockPeripheral/","title":"Source Block","text":"<p> This peripheral is provided by the Source Block. It is used to display data on Create Display Targets.</p> <p>The peripheral acts similar to a normal Terminal with some implementations from the Window API. It does not support formatted text.</p>"},{"location":"peripherals/SourceBlockPeripheral/#metadata","title":"Metadata","text":"Peripheral v1.1 Attach name <code>\"create_source\"</code> Attach side all"},{"location":"peripherals/SourceBlockPeripheral/#events","title":"Events","text":"<p>The RedRouter can send the following event:</p> Name Description Parameter 1 <code>\"monitor_resize\"</code> Whenever the display targets size changes. <code>string</code>: attached_name"},{"location":"peripherals/SourceBlockPeripheral/#functions","title":"Functions","text":""},{"location":"peripherals/SourceBlockPeripheral/#setcursorposx-y","title":"<code>setCursorPos(x, y)</code>","text":"<p>Sets the position of the cursor. <code>write</code> will begin at this position.</p> <p>Parameters</p> <ol> <li><code>x</code>: number The new <code>x</code> position of the cursor.  </li> <li><code>y</code>: number The new <code>y</code> position of the cursor.  </li> </ol>"},{"location":"peripherals/SourceBlockPeripheral/#writetext","title":"<code>write(text)</code>","text":"<p>Will write the given input to the linked display.</p> <p>Parameters</p> <ol> <li><code>text</code>: string The string to write at the current cursor position.  </li> </ol>"},{"location":"peripherals/SourceBlockPeripheral/#scrolly","title":"<code>scroll(y)</code>","text":"<p>Scrolls the content of the display vertically for <code>y</code> lines.</p> <p>Parameters</p> <ol> <li><code>y</code>: number How many lines the display will scroll.  </li> </ol>"},{"location":"peripherals/SourceBlockPeripheral/#clear","title":"<code>clear()</code>","text":"<p>Clears the whole screen.</p>"},{"location":"peripherals/SourceBlockPeripheral/#clearline","title":"<code>clearLine()</code>","text":"<p>Clears the line at the current cursor position.</p>"},{"location":"peripherals/SourceBlockPeripheral/#getliney","title":"<code>getLine(y)</code>","text":"<p>Returns the line at the wanted display position.</p> <p>Parameters</p> <ol> <li><code>y</code>: number The <code>y</code> position on the display.  </li> </ol> <p>Returns</p> <ol> <li>string The line of the given position.  </li> </ol> <p>Throws</p> <ul> <li>Whenever the given number is not in the range of <code>1</code> to <code>&lt;terminal height&gt;</code>.  </li> </ul>"},{"location":"peripherals/SourceBlockPeripheral/#getcursorpos","title":"<code>getCursorPos()</code>","text":"<p>Returns the current cursor position.</p> <p>Returns</p> <ol> <li><code>number</code> The <code>x</code> position of the cursor.  </li> <li><code>number</code> The <code>y</code> position of the cursor. </li> </ol>"},{"location":"peripherals/SourceBlockPeripheral/#getsize","title":"<code>getSize()</code>","text":"<p>Returns the current display size.</p> <p>Returns</p> <ol> <li><code>number</code> The width of the Create Display Target.  </li> <li><code>number</code> The height of the Create Display Target.  </li> </ol>"},{"location":"peripherals/TargetBlockPeripheral/","title":"Target Block","text":"<p> This peripheral is provided by the Target Block. It is used to get data from Create Display Sources.</p> <p>The peripheral only has some implementations from the Window API to receive data. It can't be manipulated much.</p>"},{"location":"peripherals/TargetBlockPeripheral/#metadata","title":"Metadata","text":"Peripheral v1.1 Attach name <code>\"create_target\"</code> Attach side all"},{"location":"peripherals/TargetBlockPeripheral/#functions","title":"Functions","text":""},{"location":"peripherals/TargetBlockPeripheral/#setwidthwidth","title":"<code>setWidth(width)</code>","text":"<p>Sets the new width of the display. Cannot be larger than 164 chars.</p> <p>Parameters</p> <ol> <li><code>width</code>: number The new width of the display.  </li> </ol> <p>Throws</p> <ol> <li>Whenever the given number is not in the range <code>1</code> to <code>164</code>.  </li> </ol>"},{"location":"peripherals/TargetBlockPeripheral/#clear","title":"<code>clear()</code>","text":"<p>Clears the whole screen.</p>"},{"location":"peripherals/TargetBlockPeripheral/#clearliney","title":"<code>clearLine(y)</code>","text":"<p>Clears the line at the cursor position.</p> <p>Parameters</p> <ol> <li><code>y</code>: number The <code>y</code> position of the to be cleared line.  </li> </ol>"},{"location":"peripherals/TargetBlockPeripheral/#getliney","title":"<code>getLine(y)</code>","text":"<p>Returns the line at the wanted display position.</p> <p>Parameters</p> <ol> <li><code>y</code>: number The <code>y</code> position on the display.  </li> </ol> <p>Returns</p> <ol> <li><code>string</code> The string from the given <code>y</code> position.  </li> </ol> <p>Throws</p> <ol> <li>Whenever the given number is not in the range <code>1</code> to <code>&lt;terminal height&gt;</code> </li> </ol>"},{"location":"peripherals/TargetBlockPeripheral/#getsize","title":"<code>getSize()</code>","text":"<p>Returns the current display size.</p> <p>Returns</p> <ol> <li><code>number</code> The width of the Target Block.   </li> <li><code>number</code> The height of the Target Block.  </li> </ol>"}]}